name: Release

on:
  workflow_dispatch:
    inputs:
      semver:
        description: 'Which version you want to increment? Use MAJOR, MINOR or PATCH'
        required: true
        default: 'PATCH'
      label:
        description: 'Add Labels. i.e final, alpha, rc'
        required: false
        default: ''

env:
  # Each Release line will include a commit to main
  RELEASE_LINE_FORMAT: '- [[%h](https://www.github.com//${{github.repository}}/commit/%H)]: %s\n'

jobs:
  releasing:
    name: Release to Production
    runs-on: ubuntu-latest

    steps:

      # Verify valid version input
      - name: FAIL for invalid version inputs
        if: ${{ !(github.event.inputs.semver  == 'MAJOR' || github.event.inputs.semver == 'MINOR' || github.event.inputs.semver == 'PATCH') }}
        run: |
          echo "::group::ERROR: INVALID VERSION INPUT"
          echo "The version ${{github.event.inputs.semver}} is not a valid value."
          echo "The value is case sensitive. Make sure you type it correctly."
          echo "Version value MUST be either MAJOR, MINOR or PATCH."
          echo "::endgroup::"
          exit 1

      # Checkout sources
      - name: Checkout
        uses: actions/checkout@v2

      # Get the latest tag and add it to a output variable
      - name: Get latest tag
        id: latest-tag
        run: |
          git fetch origin main
          git fetch --tags 
          git rebase origin/main
          export VERSION=$(git tag | tail -1)
          echo "::set-output name=version::$VERSION"

      # Generating semantic versioning. Following https://semver.org/

      # MAJOR version when you make incompatible API changes
      # Major version X (X.y.z | X > 0) MUST be incremented if any backwards incompatible changes are introduced to the public API
      - name: Generate major version
        id: major-version-gen
        run: |
          if [ '${{ github.event.inputs.semver }}' = 'MAJOR' ]; \
          then export VERSION=$(git tag | tail -1 | cut -d '.' -f 1 | awk '{$1=$1+1};1'); \
          else export VERSION=$(git tag | tail -1 | cut -d '.' -f 1); \
          fi
          echo "::set-output name=version::$VERSION"
      
      # MINOR version when you add functionality in a backwards compatible manner
      # Minor version Y (x.Y.z | x > 0) MUST be incremented if new, backwards compatible functionality is introduced to the public API.
      # It MUST be incremented if any public API functionality is marked as deprecated.
      # Minor version MUST be reset to 0 when major version is incremented.
      - name: Generate minor version
        id: minor-version-gen
        run: |
          if [ '${{ github.event.inputs.semver }}' = 'MINOR' ]; \
          then export VERSION=$(git tag | tail -1 | cut -d '.' -f 2 | awk '{$1=$1+1};1'); \
          else export VERSION=$(git tag | tail -1 | cut -d '.' -f 2); \
          fi
          if [ '${{ github.event.inputs.semver }}' = 'MAJOR' ]; \
          then export VERSION=0; \
          fi
          echo "::set-output name=version::$VERSION"

      # PATCH version when you make backwards compatible bug fixes.
      # Patch version Z (x.y.Z | x > 0) MUST be incremented if only backwards compatible bug fixes are introduced. A bug fix is defined as an internal change that fixes incorrect behavior.
      # Patch version MUST be reset to 0 when major version is incremented.
      # Patch version MUST be reset to 0 when minor version is incremented.
      - name: Generate patch version
        id: patch-version-gen
        run: |
          if [ '${{ github.event.inputs.semver }}' = 'PATCH' ]; \
          then export VERSION=$(git tag | tail -1 | cut -d '.' -f 3 | cut -d '-' -f 1 | awk '{$1=$1+1};1'); \
          else export VERSION=$(git tag | tail -1 | cut -d '.' -f 3 | cut -d '-' -f 1); \
          fi
          if [ '${{ github.event.inputs.semver }}' = 'MAJOR' ]; \
          then export VERSION=0; \
          fi
          if [ '${{ github.event.inputs.semver }}' = 'MINOR' ]; \
          then export VERSION=0; \
          fi
          if [ '${{ github.event.inputs.label }}' != '' ]; \
          then export VERSION=$VERSION-${{ github.event.inputs.label }}; \
          fi
          echo "::set-output name=version::$VERSION"

      # Create final form of semantic version
      # MAJOR.MINOR.PATCH
      - name: Generate version number and date
        id: version-gen
        run: |
          export MAJOR=${{ steps.major-version-gen.outputs.version }}
          export MINOR=${{ steps.minor-version-gen.outputs.version }}
          export PATCH=${{ steps.patch-version-gen.outputs.version }}
          export VERSION=$MAJOR.$MINOR.$PATCH
          echo "::set-output name=version::$VERSION"
      
      # Generate the data 
      - name: Generate data file to use on release
        run: |
          echo "{ \"tag_name\": \"${{ steps.version-gen.outputs.version }}\", \"body\": \" ### Changelog\n\n" > data
          git log --all --pretty='${{ env.COMMIT_RELEASE_LINE_FORMAT }}' \
          ${{ steps.latest-tag.outputs.version }}.. . \
          | sed 's|*|-|g' >> data
          echo "\"}" >> data
          cat data

      # Create release using github API
      # https://docs.github.com/en/rest/reference/repos#create-a-release
      - name: Create Release
        run: |
          curl \
          -X POST \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          $GITHUB_API_URL/repos/$GITHUB_REPOSITORY/releases \
          -d @data
